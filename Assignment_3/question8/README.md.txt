Παναγιώτα Γύφτου Α.Μ. 1115201900318

Στην άσκηση 8 διαβάζω το αρχείο txt χρησιμοποιώντας scanf και εκτελώ πχ ./main < vertex1.txt

Η αρίθμηση των κορυφών μου ξεκινάει απο το 0.Σας έχω δύο αρχεία txt το vertex1.txt και το δεύτερο vertex2.txt .

1.Η συνάρτηση undirected: με αυτή την συνάρτηση δεσμεύω χώρο στην μνήμη,ώστε να αποθηκεύσω τον γράφο που δημιουργώ.

2.Η συνάρτηση Initialize: στην συνάρτηση αυτή παίρνω σαν όρισμα έναν γράφο μη αρχικοποιημένο και έναν ακέραιο αριθμό n που είναι ο αριθμός των κορυφών.Η λειτουργία της 
είναι να αρχικοποιεί τον γράφο μεγέθους n.Επειδή η υλοποίηση του γράφου είναι με λίστες γειτνίασης κάθε θέση του πίνακα firstedge περιέχει μια κορυφή που δείχνει στα 
endpoint του ,δηλαδή με ποιές κορυφές ενώνονται.Αρχικά κάθε θέση του πίνακα firstedge,τις αρχικοποιούμε να δείχνουν στο NULL .Στο τέλος η συνάρτηση επιστρέφει στον 
χρήστη έναν κενό αρχικοποιημένο γράφο.


3.Η InsertEdge: η συνάρτηση αυτή έχει ως ορίσματα τον γράφο και μια ακμή (int x, int y, int w).Στην υλοποίηση μου επέλεξα τα endpoint τα αποθηκεύω σε αύξουσα σειρά, 
κάνω insert στο τέλος της λίστας και στο αρχείο txt (όπως σε αυτά που έχω ανεβάσει vertex1.txt και vertex2.txt ) γράφω με αύξουσα σειρά τις ακμές ,για να επιτευχθεί η 
αποθήκευση των στοιχείων με φυσική σειρά.Επειδή ο γράφος είναι μη κατευθυνόμενος αποθηκεύω μαζί με την (x,y,w) ακμή και την (y,x,w) (πάλι κάνω προσθήκη του στοιχείου 
στο τέλος της λίστας).Έτσι με αυτόν τον τρόπο αποθηκεύω ταυτόχρονα τις δύο αντίθετες κορυφές.


4.Η συνάρτηση ShowGraph: εκτυπώνει την αναπαράσταση της λίστα γειτνίασης,δηλαδή όλες τις κορυφές με τα endpoint τους.


5.Η συνάρτηση MinimumSpanningTree : παίρνει σαν όρισμα έναν γράφο και τον αριθμό των ακμών του γράφου. Η συνάρτηση χρησιμοποιεί τις συναρτήσεις sort, ώστε να 
ταξινομήσει τις ακμές σε αύξουσα σειρά με βάση το βάρος.Την συνάρτηση find όπου βρίσκει σε ποιο υποσύνολο βρίσκεται ένα στοιχείο επιστρέφοντας την κορυφή που λειτουργεί 
σαν αντιπρόσωπος,σε ποιά θέση έχει αποθηκευτεί στον πίνακα parent.Και τέλος την συνάρτηση Union που ενώνει δύο υποδέντρα σε ένα.Σε μια while εξετάζει όλες τις ακμές και 
επιστρέφει τον πίνακα με την διαδρομή του SpanningTree.


6.Η sort :επειδή η υλοποίηση του γράφου είναι σε λίστα γειτνίασης , για να διευκολυνθώ στην ταξινόμηση φτιάχνω έναν πίνακα που αποθηκεύω κάθε ακμή σε αύξουσα σειρά.Για 
την αποθήκευση ανατρέχω κάθε κορυφή με τους γείτονες της και αφου πρώτα ελέγχω αν είναι αποθηκευμένη ξανά η ακμή στον πίνακα ,πάω και ελέγχω που θα μπεί στον πίνακα, 
αν χρειαστεί μετακινώ κάποια στοιχεία ώστε να γίνει χώρος και να αποθηκευτεί η ακμή στην κατάλληλη θέση.Όταν τελειώσω και έχω ανατρέξει όλο τον γράφο αποθηκεύοντας στον 
πίνακα τις ακμές επιστρέφω τον πίνακα.


7.Η find: είναι μια αναδρομική συνάρτηση που ψάχνει σε ποιο υποσύνολο βρίσκεται το στοιχείο που ψάχνω.Περνάω σαν όρισμα τον πίνακα parent που έχει αποθηκευμένες τις 
κορυφές και το στοιχείο που ψάχνουμε.Επιστρέφει την θέση στην οποία βρίσκεται το στοιχείο.


8.Η Union: ενώνει κατάλληλα δύο υποσύνολα σε ένα.Παίρνουμε περιπτώσεις ανάλογα με τον βαθμό των υποδέντρων.Αν το πρώτο υποδέντρο είναι μεγαλύτερο από το δεύτερο και 
αντιστρόφως ή αν οι βαθμοί των υποδέντρων είναι ίσοι.

9.Η συνάρτηση print_MST : εκτυπώνει την ελάχιστη διαδρομή που επέστρεψε η συνάρτηση MinimumSpanningTree αλλά και το κόστος της.